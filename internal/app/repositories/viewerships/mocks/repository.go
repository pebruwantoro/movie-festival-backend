// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pebruwantoro/movie-festival-backend/internal/app/repositories/viewerships (interfaces: RepositoryInterface)
//
// Generated by this command:
//
//	mockgen -destination=mocks/repository.go -package=mocks . RepositoryInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/pebruwantoro/movie-festival-backend/internal/app/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateOrUpdateViewership mocks base method.
func (m *MockRepositoryInterface) CreateOrUpdateViewership(ctx context.Context, request entities.Viewership) (entities.Viewership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateViewership", ctx, request)
	ret0, _ := ret[0].(entities.Viewership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateViewership indicates an expected call of CreateOrUpdateViewership.
func (mr *MockRepositoryInterfaceMockRecorder) CreateOrUpdateViewership(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateViewership", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateOrUpdateViewership), ctx, request)
}

// GetViewershipByUserUUID mocks base method.
func (m *MockRepositoryInterface) GetViewershipByUserUUID(ctx context.Context, uuid string) ([]entities.Viewership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetViewershipByUserUUID", ctx, uuid)
	ret0, _ := ret[0].([]entities.Viewership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetViewershipByUserUUID indicates an expected call of GetViewershipByUserUUID.
func (mr *MockRepositoryInterfaceMockRecorder) GetViewershipByUserUUID(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetViewershipByUserUUID", reflect.TypeOf((*MockRepositoryInterface)(nil).GetViewershipByUserUUID), ctx, uuid)
}
