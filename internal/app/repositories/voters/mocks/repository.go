// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pebruwantoro/movie-festival-backend/internal/app/repositories/voters (interfaces: RepositoryInterface)
//
// Generated by this command:
//
//	mockgen -destination=mocks/repository.go -package=mocks . RepositoryInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/pebruwantoro/movie-festival-backend/internal/app/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateVoter mocks base method.
func (m *MockRepositoryInterface) CreateVoter(ctx context.Context, request entities.Voters) (entities.Voters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVoter", ctx, request)
	ret0, _ := ret[0].(entities.Voters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVoter indicates an expected call of CreateVoter.
func (mr *MockRepositoryInterfaceMockRecorder) CreateVoter(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVoter", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateVoter), ctx, request)
}

// DeleteVoter mocks base method.
func (m *MockRepositoryInterface) DeleteVoter(ctx context.Context, request entities.Voters) (entities.Voters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoter", ctx, request)
	ret0, _ := ret[0].(entities.Voters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoter indicates an expected call of DeleteVoter.
func (mr *MockRepositoryInterfaceMockRecorder) DeleteVoter(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoter", reflect.TypeOf((*MockRepositoryInterface)(nil).DeleteVoter), ctx, request)
}

// GetVotersByUserUUID mocks base method.
func (m *MockRepositoryInterface) GetVotersByUserUUID(ctx context.Context, uuid string) ([]entities.Voters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVotersByUserUUID", ctx, uuid)
	ret0, _ := ret[0].([]entities.Voters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVotersByUserUUID indicates an expected call of GetVotersByUserUUID.
func (mr *MockRepositoryInterfaceMockRecorder) GetVotersByUserUUID(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotersByUserUUID", reflect.TypeOf((*MockRepositoryInterface)(nil).GetVotersByUserUUID), ctx, uuid)
}
