// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pebruwantoro/movie-festival-backend/internal/app/repositories/movies (interfaces: RepositoryInterface)
//
// Generated by this command:
//
//	mockgen -destination=mocks/repository.go -package=mocks . RepositoryInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/pebruwantoro/movie-festival-backend/internal/app/entities"
	movies "github.com/pebruwantoro/movie-festival-backend/internal/app/repositories/movies"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CountTotalMoviesByFilter mocks base method.
func (m *MockRepositoryInterface) CountTotalMoviesByFilter(ctx context.Context, filter movies.Filter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTotalMoviesByFilter", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTotalMoviesByFilter indicates an expected call of CountTotalMoviesByFilter.
func (mr *MockRepositoryInterfaceMockRecorder) CountTotalMoviesByFilter(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTotalMoviesByFilter", reflect.TypeOf((*MockRepositoryInterface)(nil).CountTotalMoviesByFilter), ctx, filter)
}

// CreateMovie mocks base method.
func (m *MockRepositoryInterface) CreateMovie(ctx context.Context, request entities.Movie) (entities.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", ctx, request)
	ret0, _ := ret[0].(entities.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockRepositoryInterfaceMockRecorder) CreateMovie(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateMovie), ctx, request)
}

// GetMostViewedMovie mocks base method.
func (m *MockRepositoryInterface) GetMostViewedMovie(ctx context.Context) (entities.MovieWithViewership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostViewedMovie", ctx)
	ret0, _ := ret[0].(entities.MovieWithViewership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostViewedMovie indicates an expected call of GetMostViewedMovie.
func (mr *MockRepositoryInterfaceMockRecorder) GetMostViewedMovie(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostViewedMovie", reflect.TypeOf((*MockRepositoryInterface)(nil).GetMostViewedMovie), ctx)
}

// GetMostViewedMovieGenre mocks base method.
func (m *MockRepositoryInterface) GetMostViewedMovieGenre(ctx context.Context) (entities.MovieGenreWithViewership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostViewedMovieGenre", ctx)
	ret0, _ := ret[0].(entities.MovieGenreWithViewership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostViewedMovieGenre indicates an expected call of GetMostViewedMovieGenre.
func (mr *MockRepositoryInterfaceMockRecorder) GetMostViewedMovieGenre(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostViewedMovieGenre", reflect.TypeOf((*MockRepositoryInterface)(nil).GetMostViewedMovieGenre), ctx)
}

// GetMovieByUUID mocks base method.
func (m *MockRepositoryInterface) GetMovieByUUID(ctx context.Context, uuid string) (entities.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieByUUID", ctx, uuid)
	ret0, _ := ret[0].(entities.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieByUUID indicates an expected call of GetMovieByUUID.
func (mr *MockRepositoryInterfaceMockRecorder) GetMovieByUUID(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieByUUID", reflect.TypeOf((*MockRepositoryInterface)(nil).GetMovieByUUID), ctx, uuid)
}

// GetMovieByUUIDs mocks base method.
func (m *MockRepositoryInterface) GetMovieByUUIDs(ctx context.Context, uuids []string) ([]entities.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieByUUIDs", ctx, uuids)
	ret0, _ := ret[0].([]entities.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieByUUIDs indicates an expected call of GetMovieByUUIDs.
func (mr *MockRepositoryInterfaceMockRecorder) GetMovieByUUIDs(ctx, uuids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieByUUIDs", reflect.TypeOf((*MockRepositoryInterface)(nil).GetMovieByUUIDs), ctx, uuids)
}

// GetMoviesByFilter mocks base method.
func (m *MockRepositoryInterface) GetMoviesByFilter(ctx context.Context, filter movies.Filter) ([]entities.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoviesByFilter", ctx, filter)
	ret0, _ := ret[0].([]entities.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoviesByFilter indicates an expected call of GetMoviesByFilter.
func (mr *MockRepositoryInterfaceMockRecorder) GetMoviesByFilter(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoviesByFilter", reflect.TypeOf((*MockRepositoryInterface)(nil).GetMoviesByFilter), ctx, filter)
}

// UpdateMovie mocks base method.
func (m *MockRepositoryInterface) UpdateMovie(ctx context.Context, request entities.Movie) (entities.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", ctx, request)
	ret0, _ := ret[0].(entities.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateMovie(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateMovie), ctx, request)
}
